Goal:100,,,CoreBelief1StayAlive,,,

//is goal complete

long seconds = java.time.temporal.ChronoUnit.SECONDS.between(prevCalendar, calendar);
System.out.println("Time since last iteration: " + seconds);

if (seconds < 1){
	goalEvalResult.setComplete(true);
} else {
	goalEvalResult.setComplete(false);
	
}


//how much progress was made
 int resultOutput = (int)seconds / 100;
 resultOutput = resultOutput * -1;
 if (goalEvalResult.getComplete()){
 	resultOutput = resultOutput + 1;
 }
 
  System.out.println("resultOutput: " + resultOutput);
	goalEvalResult.setResult(resultOutput);
		
uuuuuGoal:100,,,CoreBelief2BeEfficientWithHardwareUsage,,,
	
	//Cpu Usage
	try {
		Runtime run = Runtime.getRuntime();
		//String command = "pidstat | grep \"java\"| awk -F \" \" '{print $9}'";
		String command = "pidstat | awk -F \" \" '{print $9}'";
    	Process p = run.exec(new String[] {"/bin/bash","-c",command});
    	BufferedReader stdOutput = new BufferedReader(new InputStreamReader(p.getInputStream()));
		//BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
		String cpuUsage = "";
		double totalCpuUsage = 0;
		
		//useless variable to throw away the non double line
		String trash = stdOutput.readLine();
		
		
		cpuUsage = stdOutput.readLine();
		System.out.println(cpuUsage);
		while (cpuUsage != null){
			double usage = Double.valueOf(cpuUsage);
			totalCpuUsage += usage;
			cpuUsage = stdOutput.readLine();
		}
		System.out.println("Total: " + totalCpuUsage);
    } catch (Exception e){
    	e.printStackTrace();
    }
    
    //is goal complete (ignore NoSuchElementException error, will happen until we write out a goal eval
    
    //are we moving closer to goal
 
