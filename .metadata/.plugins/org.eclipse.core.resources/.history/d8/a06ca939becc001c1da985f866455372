Goal:100,,,CoreBelief1StayAlive,,,

long seconds = java.time.temporal.ChronoUnit.SECONDS.between(prevCalendar, calendar);end
System.out.println("Time since last iteration: " + seconds);end

if (seconds < 1)cblock0
	goalEvalResult.setComplete(true);end
block0 else tblock0
	goalEvalResult.setComplete(false);end
block0

 int resultOutput = (int)seconds / 100;end
 resultOutput = resultOutput * -1;end
 if (goalEvalResult.getComplete())block0
 	resultOutput = resultOutput + 1;end
block0
 
  System.out.println("resultOutput: " + resultOutput);end
	goalEvalResult.setResult(resultOutput);end
		
uuuuuGoal:100,,,CoreBelief2BeEfficientWithHardwareUsage,,,
	
    if (currentCpuUsage < 4){cblock0
    	goalEvalResult.setComplete(true);end
    block0 else tblock0
    	goalEvalResult.setComplete(false);end
    block0
    
    int resultOutput = (int)((prevCpuUsage - currentCpuUsage) * 3);:;/
    if (goalEvalResult.getComplete()){/0;/
    	goalEvalResult.setResult(300);:;/
    } else {/1;/
    	goalEvalResult.setResult(resultOutput);:;/
    	  /1;/
    }/0;/
 	System.out.println("hardwareUsage result: " + resultOutput);:;/
 	
 uuuuuGoal:100,,,CoreBelief3BeliefsShouldNotThrowErrors,,,
	

	if (currentErrorLocations.size() == 0){/0;/
		goalEvalResult.setComplete(true);:;/
	} else {/1;/
		goalEvalResult.setComplete(false);:;/
		  /1;/
	}/0;/
    	

    int resultOutput = (prevErrorLocations.size() - currentErrorLocations.size()) * 100;:;/
    	
    goalEvalResult.setResult(resultOutput);:;/

